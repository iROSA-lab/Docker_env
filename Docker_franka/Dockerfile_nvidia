# Base image of ubuntu 20.04, cuda 12.1 and ZED SDK 4
FROM stereolabs/zed:4.0-devel-cuda12.1-ubuntu20.04

ENV LOGNAME root
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8

# Setup ROS noetic
RUN apt-get update -y || true && \
    DEBIAN_FRONTEND=noninteractive apt-get install -y tzdata curl locales lsb-release gnupg2 mesa-utils apt-transport-https && \
    sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" > /etc/apt/sources.list.d/ros-latest.list' && \
    curl -s https://raw.githubusercontent.com/ros/rosdistro/master/ros.asc | sudo apt-key add - && \
    echo 'export LIBGL_ALWAYS_INDIRECT=1' >> ~/.bashrc && \
    apt-get update || true &&\
    DEBIAN_FRONTEND=noninteractive apt-get install -y ros-noetic-desktop-full build-essential cmake usbutils libusb-1.0-0-dev git -y --allow-unauthenticated

# Install Packages
RUN apt-get install -y python3-rosdep python3-rosinstall  python3-rosinstall-generator python3-wstool

# Install Moveit!
RUN apt-get update -q && \
    apt-get dist-upgrade -q -y && \
    apt-get install -y ros-noetic-moveit && \
    rm -rf /var/lib/apt/lists/*

# Initialize rosdep
RUN rosdep init && rosdep update

# Source ROS
RUN echo "source /opt/ros/noetic/setup.bash" >> ~/.bashrc

# Setup ROS workspace
RUN mkdir -p /opt/ros_ws/src
WORKDIR /opt/ros_ws
RUN  . /opt/ros/noetic/setup.sh && \
	    catkin_make 

# Source ROS
RUN echo "source /opt/ros_ws/devel/setup.bash" >> ~/.bashrc

# Install Franka packages
RUN apt-get update && apt-get install -y \
    ros-noetic-libfranka \
    ros-noetic-franka-ros

RUN bash -c "source /opt/ros_ws/devel/setup.bash"
RUN bash -c "source /opt/ros/noetic/setup.bash"

# wget http://ftp.kr.debian.org/debian/pool/main/i/init-system-helpers/init-system-helpers_1.60_all.deb
# sudo apt install init-system-helpers_1.60_all.deb

# wget https://github.com/iROSA-lab/Docker_env_Tiago/blob/main/nvidia-scripts.sh

# bash nvidia-scripts.sh
# sudo apt install -y nvidia-docker2
# sudo systemctl daemon-reload
# sudo systemctl restart docker


# xhost +

# docker build -t franka .

# docker run -it --net=host --gpus all \
#     --privileged \
#     --env="NVIDIA_DRIVER_CAPABILITIES=all" \
#     --env="DISPLAY" \
#     --env="QT_X11_NO_MITSHM=1" \
#     --volume="/tmp/.X11-unix:/tmp/.X11-unix:rw" \
#     -v "$SSH_AUTH_SOCK:$SSH_AUTH_SOCK" -e SSH_AUTH_SOCK=$SSH_AUTH_SOCK\
#     --name="franka_nvidia"\
#     franka_nvidia \
#     bash


# docker start franka
# xhost +
# docker exec -it franka bash
# docker stop franka